LLVMProgram
cpp

int
basic

string
basic

Register
external
Register.h

RegisterKind
external
Register.h

Registers
external
Register.h

RegisterArray
external
Register.h

RegisterKindArray
external
Register.h

StringArray = array of string

BinaryOperationArgument = variant {
  register : Register,
  number : string
}

BinaryOperator = variant {
  add, sub, div, mul, mod, lth, le, gth, ge, equ, ne
}

BinaryOperation = record {
  outReg : Register,
  kind : RegisterKind,
  lArg : BinaryOperationArgument,
  rArg : BinaryOperationArgument,
  bop : BinaryOperator
}

CallInstrRet = variant {
  void,
  obj : Register  
}

CallInstr = record {
  retType : CallInstrRet,
  function : string,
  args : Registers
}

BrIfInstr = record {
  cond : Register,
  ifTrueBlock : string,
  ifFalseBlock : string  
}

BrInstr = record {
  block : string
}

PhiCase = record {
  value : Register,
  label : string
}

PhiCases = array of PhiCase

PhiInstr = record {
  ident : string,
  ret : Register,
  caseses : PhiCases
}

AllocaInstrCount = variant {
  single,
  multiple :  Register
}

AllocaInstr = record {
  count : AllocaInstrCount,
  ret : Register  
}

LoadInstr = record {
  ret : Register,
  ptr : Register
}

StoreInstr = record {
  val : Register,
  ptr : Register
}

GetElementPtrInstr = record {
  ret : Register,
  ptr : Register,
  indexes : RegisterArray
}

ReturnInstr = variant {
  value : Register,
  empty  
}

Instr = variant {
  binaryOperationInstr : BinaryOperation,
  callInstr : CallInstr,
  phiInstr : PhiInstr,
  returnInstr : ReturnInstr,
  brInstr : BrInstr,
  brIfInstr : BrIfInstr,
  printInstr : Register,
  commentInstr : string,
  allocaInstr : AllocaInstr,
  loadInstr : LoadInstr,
  getElementPtrInstr : GetElementPtrInstr,
  storeInstr : StoreInstr
}

InstrArray = array of Instr

LLVMBlock = record {
	name : string,
	body : InstrArray
}

LLVMBlockArray = array of LLVMBlock

LLVMFunctionArgument = record {
  reg : Register,
  name : string
}

LLVMFunctionArgumentArray = array of LLVMFunctionArgument

LLVMFunctionType = variant {
  void,
  obj : RegisterKind
}

LLVMFunction = record {
    name : string,
    type : LLVMFunctionType,
    args : LLVMFunctionArgumentArray,
	blocks : LLVMBlockArray
}

LLVMFunctionArray = array of LLVMFunction

LLVMConstString = record {
  id : int,
  value : string
}

LLVMConstStringArray = array of LLVMConstString

LLVMStruct = record {
  name : string,
  elems : RegisterKindArray
}

LLVMStructElementArray = array of LLVMStruct

LLVMProgram = record {
  functions : LLVMFunctionArray,
  strings : LLVMConstStringArray,
  structs : LLVMStructElementArray
}