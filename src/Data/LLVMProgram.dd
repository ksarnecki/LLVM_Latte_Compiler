LLVMProgram
cpp

int
basic

string
basic

Register
external
Register.h

RegisterKind
external
Register.h

Registers
external
Register.h


BinaryOperationArgument = variant {
  register : Register,
  number : string
}

BinaryOperator = variant {
  add, sub, div, mul, mod, lth, le, gth, ge, equ, ne
}

BinaryOperation = record {
  outReg : Register,
  lArg : BinaryOperationArgument,
  rArg : BinaryOperationArgument,
  bop : BinaryOperator
}

CallInstrRet = variant {
  void,
  obj : Register  
}

CallInstr = record {
  retType : CallInstrRet,
  function : string,
  args : Registers
}

BrIfInstr = record {
  cond : Register,
  ifTrueBlock : string,
  ifFalseBlock : string  
}

BrInstr = record {
  block : string
}

PhiCase = record {
  value : Register,
  label : string
}

PhiCases = array of PhiCase

PhiInstr = record {
  ident : string,
  ret : Register,
  caseses : PhiCases
}

Instr = variant {
  binaryOperationInstr : BinaryOperation,
  callInstr : CallInstr,
  phiInstr : PhiInstr,
  returnInstr : Register,
  brInstr : BrInstr,
  brIfInstr : BrIfInstr,
  printInstr : Register
}

InstrArray = array of Instr

LLVMBlock = record {
	name : string,
	body : InstrArray
}

LLVMBlockArray = array of LLVMBlock

LLVMFunctionArgument = record {
  reg : Register,
  name : string
}

LLVMFunctionArgumentArray = array of LLVMFunctionArgument

LLVMFunctionType = variant {
  void,
  obj : RegisterKind
}

LLVMFunction = record {
    name : string,
    type : LLVMFunctionType,
    args : LLVMFunctionArgumentArray,
	blocks : LLVMBlockArray
}

LLVMProgram = array of LLVMFunction